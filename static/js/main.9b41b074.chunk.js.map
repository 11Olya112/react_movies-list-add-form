{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","onBlur","useState","Math","random","toString","slice","id","hasError","htmlFor","classNames","type","placeholder","NewMovie","onAdd","count","inputValues","setInputValues","formFields","setMovie","handleBlur","event","target","trim","handleInputChange","prevState","onSubmit","preventDefault","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b41b074.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: React.ChangeEvent<HTMLInputElement>) => void,\n  onBlur: (event: React.FocusEvent<HTMLInputElement, Element>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n  onBlur,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const hasError = required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { InputEvent, Movie, InputValues } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count] = useState(0);\n  const [inputValues, setInputValues] = useState<InputValues>({\n    title: false,\n    imdbId: false,\n    imgUrl: false,\n    imdbUrl: false,\n  });\n\n  const formFields = {\n    title: '',\n    description: '',\n    imdbId: '',\n    imgUrl: '',\n    imdbUrl: '',\n  };\n\n  const [movie, setMovie] = useState({ ...formFields });\n\n  const reset = () => {\n    setMovie({ ...formFields });\n    setInputValues({\n      title: false,\n      imdbId: false,\n      imgUrl: false,\n      imdbUrl: false,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (movie.title\n      && movie.imgUrl\n      && movie.imdbUrl\n      && movie.imdbId\n    ) {\n      onAdd(movie);\n      reset();\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n\n    switch (name) {\n      case 'title':\n        if (!movie.title.trim()) {\n          setInputValues({\n            ...inputValues,\n            title: true,\n          });\n        }\n\n        break;\n\n      case 'imgUrl':\n        if (!movie.imgUrl) {\n          setInputValues({\n            ...inputValues,\n            imgUrl: true,\n          });\n        }\n\n        break;\n\n      case 'imdbUrl':\n        if (!movie.imdbUrl) {\n          setInputValues({\n            ...inputValues,\n            imdbUrl: true,\n          });\n        }\n\n        break;\n\n      case 'imdbId':\n        if (!movie.imdbId.trim()) {\n          setInputValues({\n            ...inputValues,\n            imdbId: true,\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleInputChange = (event: InputEvent) => {\n    const { name, value } = event.target;\n\n    setMovie(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesFromServer} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}