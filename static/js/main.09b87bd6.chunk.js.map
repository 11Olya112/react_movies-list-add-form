{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","isError","onChange","onBlur","useState","Math","random","toString","slice","id","hasError","htmlFor","classNames","type","placeholder","NewMovie","onAdd","count","setCount","inputValues","setInputValues","formFields","setMovie","handleBlur","event","target","trim","handleInputChange","prevState","disableButton","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09b87bd6.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { InputEvent } from '../../types/Movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  isError?: boolean,\n  onChange?: (newValue: InputEvent) => void,\n  onBlur: (event: React.FocusEvent<HTMLInputElement, Element>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  isError,\n  onChange,\n  onBlur,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const hasError = required && isError;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          name={name}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { InputEvent, Movie, InputValues } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [inputValues, setInputValues] = useState<InputValues>({\n    title: false,\n    imdbId: false,\n    imgUrl: false,\n    imdbUrl: false,\n  });\n\n  const formFields = {\n    title: '',\n    description: '',\n    imdbId: '',\n    imgUrl: '',\n    imdbUrl: '',\n  };\n\n  const [movie, setMovie] = useState({ ...formFields });\n\n  const reset = () => {\n    setMovie({ ...formFields });\n    setInputValues({\n      title: false,\n      imdbId: false,\n      imgUrl: false,\n      imdbUrl: false,\n    });\n    setCount(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (movie.title\n      && movie.imgUrl\n      && movie.imdbUrl\n      && movie.imdbId\n    ) {\n      onAdd(movie);\n      setCount(count + 1);\n      reset();\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n\n    switch (name) {\n      case 'title':\n        if (!movie.title.trim()) {\n          setInputValues({\n            ...inputValues,\n            title: true,\n          });\n        }\n\n        break;\n\n      case 'imgUrl':\n        if (!movie.imgUrl.trim()) {\n          setInputValues({\n            ...inputValues,\n            imgUrl: true,\n          });\n        }\n\n        break;\n\n      case 'imdbUrl':\n        if (!movie.imdbUrl.trim()) {\n          setInputValues({\n            ...inputValues,\n            imdbUrl: true,\n          });\n        }\n\n        break;\n\n      case 'imdbId':\n        if (!movie.imdbId.trim()) {\n          setInputValues({\n            ...inputValues,\n            imdbId: true,\n          });\n        }\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleInputChange = (event: InputEvent) => {\n    const { name, value } = event.target;\n\n    setMovie(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n\n    switch (name) {\n      case (movie.title):\n        setInputValues({\n          ...inputValues,\n          title: false,\n        });\n\n        break;\n\n      case (movie.imgUrl):\n\n        setInputValues({\n          ...inputValues, imgUrl: false,\n        });\n\n        break;\n\n      case (movie.imdbUrl):\n        setInputValues({\n          ...inputValues,\n          imdbUrl: false,\n        });\n\n        break;\n\n      case (movie.imdbId):\n        setInputValues({\n          ...inputValues,\n          imdbId: false,\n        });\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const disableButton = (\n    !movie.title.trim()\n    || !movie.imgUrl.trim()\n    || !movie.imdbUrl.trim()\n    || !movie.imdbId.trim()\n  );\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n        isError={inputValues.title}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n        isError={inputValues.imgUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n        isError={inputValues.imdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={handleInputChange}\n        onBlur={handleBlur}\n        required\n        isError={inputValues.imdbId}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={disableButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}